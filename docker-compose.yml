/version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oauth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: oauth_auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - oauth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database (Alternative)
  mongodb:
    image: mongo:7-jammy
    container_name: oauth_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password
      MONGO_INITDB_DATABASE: oauth_auth_db
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    ports:
      - "27017:27017"
    networks:
      - oauth_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Sessions
  redis:
    image: redis:7-alpine
    container_name: oauth_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - oauth_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oauth_app
    restart: unless-stopped
    env_file: .env
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      REDIS_HOST: redis
      MONGODB_URI: mongodb://admin:admin_password@mongodb:27017/oauth_auth_db?authSource=admin
    volumes:
      - ./server:/app/server
      - ./client:/app/client
      - ./config:/app/config
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - oauth_network
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: oauth_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./client/public:/usr/share/nginx/html
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - oauth_network

  # pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4
    container_name: oauth_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - oauth_network
    depends_on:
      - postgres

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog
    container_name: oauth_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - oauth_network

networks:
  oauth_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  pgadmin_data:
